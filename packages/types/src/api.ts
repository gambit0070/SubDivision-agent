/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/evaluate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Evaluate subdivision scenarios for a property */
        post: operations["evaluate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        Severity: "low" | "medium" | "high";
        PropertyInput: {
            address?: string | null;
            suburb?: string | null;
            /** @description Площадь участка, м² */
            land_area_sqm: number;
            /** @description Фронтаж, м */
            frontage_m?: number | null;
            /** @description Например R20/R25/R30 */
            r_code?: string | null;
            /** @description Цена покупки, AUD */
            purchase_price: number;
        };
        Assumptions: {
            /** @default 20000 */
            demo_cost_fixed_min: number;
            /** @default 50000 */
            demo_cost_fixed_max: number;
            /** @default 30000 */
            subdiv_cost_range_min: number;
            /** @default 50000 */
            subdiv_cost_range_max: number;
            /** @default 300000 */
            min_build_cost_total: number;
            /** @default 0.07 */
            annual_interest_rate: number;
            /** @default 6 */
            subdiv_months: number;
            /** @default 18 */
            build_months: number;
            /** @default 500 */
            weekly_rent_if_retain: number;
            stamp_duty?: number | null;
            /** @default 1000 */
            settlement_cost: number;
            /** @default 1200 */
            council_rates_annual: number;
            /** @default 0.1 */
            contingency_pct: number;
        };
        MarketBenchmarks: {
            land_price_per_sqm_small_lot: number;
            house_arv?: number | null;
            /** @default 200 */
            land_target_lot_size_sqm: number;
        };
        ScenarioSettings: {
            /** @default true */
            allow_retain: boolean;
            /** @default 200 */
            target_lot_size_sqm: number;
            /** @default 10 */
            min_frontage_required_m: number;
        };
        ScenarioResult: {
            scenario: string;
            lots: number;
            revenue: number;
            /** @description purchase + project costs (ex holding) */
            total_cost: number;
            holding_cost: number;
            profit: number;
            /** @description profit / (total_cost + holding_cost) */
            margin_on_cost: number;
            /** @description profit / purchase_price */
            roi_simple: number;
            /** @default [] */
            notes: string[];
        };
        AdviceItem: {
            code: string;
            severity: components["schemas"]["Severity"];
            message: string;
        };
        SensitivityBand: {
            base_profit: number;
            best_profit: number;
            worst_profit: number;
        };
        EvaluateRequest: {
            prop: components["schemas"]["PropertyInput"];
            asm: components["schemas"]["Assumptions"];
            market: components["schemas"]["MarketBenchmarks"];
            scen?: components["schemas"]["ScenarioSettings"];
        };
        EvaluationResponse: {
            price_per_sqm: number;
            lot_yield_estimate: number;
            scenarios: components["schemas"]["ScenarioResult"][];
            /** @default [] */
            advice: components["schemas"]["AdviceItem"][];
            sensitivity?: {
                [key: string]: components["schemas"]["SensitivityBand"];
            };
            best_scenario_code?: string | null;
            /** @default [] */
            scenario_order: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    evaluate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluationResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
